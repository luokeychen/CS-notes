..  coding: utf-8
.. 1 tab = 4 spaces

.. 文件名: about_language.rst
.. 作者: Tower Joo<zhutao.iscas@gmail.com>
.. 日期: 2009-12-10 22:44:58
.. 说明: 

=============================
关于语言学习的反思
=============================


本博客所有内容采用 `Creative Commons Licenses <http://creativecommons.org/about/licenses/meet-the-licenses>`_  许可使用.
引用本内容时，请保留 `朱涛`_, `出处`_ ，并且 **非商业** .

点击 `订阅`_ 来订阅本博客.(推荐使用 `google reader`_, 如果你的浏览器不支持直接订阅,请直接在 `google reader`_ 中手动添加).

点击 `下载pdf阅读`_ (如果浏览器不支持直接打开,请点击右键另存)


摘要
========================================

本文主要是针对语言学习的一些反思,包括.

.. contents::


引入
=========
为了把Rest格式的文档转换为 `Creole`_ 格式的wiki(主要是因为之前的文档都是用Rest写的, 而 `bitbucket`_ 只支持  `Creole`_ 的文档格式), 
所以昨天起开始阅读 `Docutils`_ 的源代码, 应该说 `Docutils`_ 代码写的还是很清楚的而且注释也很规范, 看了好会, 思路有了, 不过
还是很不清楚了.

发现归根结底还是对语言的不熟悉,对一些best practice的不了解, 跟踪起代码来很吃力.

于是,开始学习 `Python`_ 的一些细节, 在学习中突然生出了一些想法. 

**我是一直唾弃C++的无数的细节, 而倾心于Python的简洁与明了, 经常给别人说Python的书只有100来页,而C++的就有1000多页, 可这是事实吗?**

让我们来看看语言相关的一些事情.

常见的语言
===============

这里不去按照什么强类型,弱类型,动态,静态等去区分, 我只想从个人的角度来说明一些我的看法.

一直以来我的一个目标是要学习三类语言:

#. 面向结构的语言(C)
#. 面向对象的语言(c++, python)
#. 函数式语言(Lisp, haskel)

目前为止, 函数式语言的系统学习还没有真正开始过, 不过, 像python, javascript这些语言已经有了部分的函数式语言的特性:
如匿名函数,lamda表达式等.

我这里也不谈这几种语言的区别和优势等, 只从个人角度来谈下对这几种语言及一些语言特性的理解.

关于C
-----------
C个人觉得是必须要熟练掌握的一种语言, 它是一种静态类型的语言, 也就是说它是在编译期来进行类型检查, 
继而在编译时就可以进行一些大规模的优化, 所以它的执行速度是很快的.

但是,同样的问题就是你得对底层有相当的熟悉,如内存管理, 指针地址等. 这样可能就会影响到对问题本身的专注,
而成了对语言本身的关注.

关于Python
---------------

于是, 我在2年多前开始学习python, 随着学习的深入,发现它是一种特别适合专注于问题本身, 而不用过多关注语言细节的语言.
所以有人称其为最接近于自然语言的编程语言, 用它来做为问题的原型,可以很快生成一个可执行的原型.

所以很多人的解决思路会是: 分析问题->使用python建立原型->原型验证为正确后,根据需要(如性能等)改写为其它语言.

随着python的发展, 第三部通常都可以省略了.

关于C++
-------------

最不好意思提的就是C++, 自己有一本 `C++ Programming language <http://www.douban.com/subject/2696025/>`_
也读过(只是读过) `C++ primer <http://www.douban.com/subject/1415354/>`_, 甚至还看过高阶一些的Effective系列.

面对1000多页的书,通常是看了后面忘了前面的, 看了前面的又忘了后面的.如此反复最终也没有真正熟悉C++.

那么, 我在引入部分提到的一些思考是什么呢? 就是下面要讲的, 究竟学习Python和学习C++有什么不同.

学习C++和学习python究竟有什么不同
==================================

昨天乐此不疲地学习了Python的iterator, generator, yield等一系列语语言层面的特性, 很东但是觉得很满足地
躺在床上,突然思考一个问题:

**python的这些语言细节和C++的那些语言特性对于学习而言,不是相同的吗?为什么我对python乐此不疲而对C++又如此痛恨?**

其实当我想到这些对于学习层面来说是相同时, 我是有一些失望的, 似乎之前的很多快乐就瞬间消失了.

突然发现这本身是一种偏见, 所谓的"爱屋及乌", 

初学者应该学习哪种语言
=======================

你了解几种语言
=================

结论
===============

后记
==============

参考资料
========================================

#. 
#. 
#. 


本文的源码
========================================

本文的rst源码链接在 `这里`_ .

点击 `下载pdf阅读`_ (如果浏览器不支持直接打开,请点击右键另存)


.. _朱涛: http://sites.google.com/site/towerjoo
.. _出处: http://www.cnblogs.com/mindsbook
.. _订阅: http://feed.feedsky.com/MindsbookTowerJoo
.. _google reader: http://reader.google.com
.. _这里: 
.. _下载pdf阅读: 
.. _Docutils: http://docutils.sourceforge.net/
