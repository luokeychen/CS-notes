.. Author: Tower Joo<zhutao.iscas@gmail.com>
.. Time: 2009-06-23 08:23

========================================
算法基础知识
========================================


文档概要
========================================






关于算法时间复杂度
========================================

采用的是 **渐近式的定义(Asymptotic Definition)**, 而不是一种精确的.

Big-O记号
----------------------------------------
如果, 存在正常数c和n\ :sub:`0`, 满足:

0 <= f(n) <= cg(n) 对于所有的 n>= n\ :sub:`0`

我们记作: O(g(n))  = f(n)

**Big-O记号给定了一个函数的上限**.


Big-Omega记号
----------------------------------------

由于RestructedText没有对应的数学记号,所以我们使用G来代替.

如果, 存在正常数c和n\ :sub:`0` ,满足:

0<=cg(n)<<f(n),对于所有的 n>=n\ :sub:`0`

那么, 记G(g(n)) = f(n)

**Big-Omega记号给定了一个函数的下限**.

Big-Theta记号
--------------------

由于RestructedText没有对应的数学记号,所以我们使用T来代替.

如果, 存在正常数c\ :sub:`1` , c\ :sub:`2` 和n\ :sub:`0` ,满足:

0<=c\ :sub:`1` g(n)<<f(n)<= c\ :sub:`2` g(n),对于所有的 n>=n\ :sub:`0`

那么, 记T(g(n)) = f(n)

**Big-Theta记号给定了一个函数的渐近的逼近(asymptotically tight bound)**.






递归的时间复杂度
========================================

替换方法(Substitution Method)
----------------------------------------

通常分为三步:

#. 猜测: 猜出具体的渐近表达式
#. 证明: 使用 **数学归纳法** 进行证明,注意基本条件的证明

一个例子:

::

    f(n) = 2f(n/2) + n (合并排序的递归式)

    证明:
    1)猜测: f(n) = O(nlgn)  ==>通常猜测会很难,但是可通过多次猜测,而增加或者减少复杂度次数
    2)证明:
    假设:f(n) = O(nlgn)当n=k/2时成立,即 f(k/2) = O(k/2 * lgk/2) <= c* k/2*lgk/2
    则: f(k) = 2f(k/2) + k 
             <= 2* c * k/2 * lgk/2 + k
             = cklgk/2+1
             =cklgk - ck + k
             <= cklgk
    当c>=1,
    处理基本条件:
    基本条件f(1)=1,那么显然有 f(1)代入猜测的式中得 f(1) <= c*1*lg1 = 0, 从而产生矛盾
    所以不成立,但是注意到,big-O的定义是对于n>=n0, 而n0为某个正常数(可能很大)
    又,f(2)=2f(1)+2=4, f(3)=2f(1)+3=5,所以我们可以从n0=2开始取值(即作为基本条件),即:
    f(2)=4, f(2)=c*2*lg2=2*c,当c>=2时成立.
    结束.

另一个例子(替换变量)

::

    T(n) = 2T(n^1/2) + lgn (含有根式)
    此时,我们可以令 n=2^m, 即 m=lgn,替换原式得:
    T(2^m) = 2T(2^m/2) + m
    又令S(m) = T(2^m),则替换后得:
    S(m) = 2S(m/2) + m
    与上例的结构相同,所以S(m) = O(mlgm),替换回后得
    T(n) = O(mlgm) = O(lgn lglgn)

